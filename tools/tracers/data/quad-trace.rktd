;; Data is a list of lists of boundary structures
;; There is one inner list for each boundary in the program
;; The boundary structures have 4 fields
;; - from-file : String
;; - to-file  : String
;; - val : String
;; - checks : Natural
((#s(boundary "utils.rkt" "wrap.rkt" "split-last" 0) #s(boundary "utils.rkt" "wrap.rkt" "attr-delete" 0) #s(boundary "utils.rkt" "wrap.rkt" "attr-change" 0) #s(boundary "utils.rkt" "wrap.rkt" "quad-attr-set" 0) #s(boundary "utils.rkt" "wrap.rkt" "join-quads" 0) #s(boundary "utils.rkt" "wrap.rkt" "merge-attrs" 0) #s(boundary "utils.rkt" "wrap.rkt" "flatten-quadtree" 0) #s(boundary "utils.rkt" "wrap.rkt" "quad-attr-remove*" 0) #s(boundary "utils.rkt" "wrap.rkt" "group-quad-attr-remove*" 0) #s(boundary "utils.rkt" "wrap.rkt" "group-quad-attr-set" 0)) (#s(boundary "utils.rkt" "quad-main.rkt" "add-vert-positions" 3) #s(boundary "utils.rkt" "quad-main.rkt" "split-last" 0) #s(boundary "utils.rkt" "quad-main.rkt" "compute-line-height" 0) #s(boundary "utils.rkt" "quad-main.rkt" "quad-attr-set*" 0) #s(boundary "utils.rkt" "quad-main.rkt" "attr-change" 0) #s(boundary "utils.rkt" "quad-main.rkt" "quad-map" 0) #s(boundary "utils.rkt" "quad-main.rkt" "hyphenate-quad" 0) #s(boundary "utils.rkt" "quad-main.rkt" "join-quads" 0) #s(boundary "utils.rkt" "quad-main.rkt" "merge-attrs" 0) #s(boundary "utils.rkt" "quad-main.rkt" "group-quad-attr-set*" 0) #s(boundary "utils.rkt" "quad-main.rkt" "split-quad" 0)) (#s(boundary "utils.rkt" "render.rkt" "flatten-quad" 0)) (#s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bf-min-precision" 1) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bf-max-precision" 1) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfeven?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfcosh" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfcopy" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bf" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsum" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfmin2" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfcanonicalize" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsech" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfbesy" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloats-between" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfrint" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfasin" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfexpm1" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfinteger?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfstep" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfbesy0" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfcsch" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfpositive?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat-exponent" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfmax2" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat->ordinal" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfzeta" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsin+cos" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bf-precision" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsec" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfagm" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfexp" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsqrt" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfinfinite?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "integer->bigfloat" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfatanh" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfexp2" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfneg" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfcoth" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat->string" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfnan?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfasinh" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfzero?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfgamma" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bftruncate" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bferf" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfbesj" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat-precision" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfabs" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfatan" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsgn" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfbesj1" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bflt?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfmul" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bflog" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfexp10" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfgte?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfround" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat-significand" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat->sig+exp" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bftanh" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bffloor" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfrational?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfmodf" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfcos" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat->real" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bf=?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bftan" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bflte?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfeint" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfnext" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bf1/sqrt" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfprev" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "real->bigfloat" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsqr" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bflog10" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfhypot" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfshift" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfnegative?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsin" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bflog-gamma/sign" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfbesj0" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfacos" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfcsc" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfadd" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bflog2" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfacosh" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfbesy1" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "string->bigfloat" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfceiling" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bflog-gamma" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "sig+exp->bigfloat" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfcot" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bf-rounding-mode" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "rational->bigfloat" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfpsi0" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfli2" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat-signbit" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bflog1p" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfdiv" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bferfc" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfatan2" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bffactorial" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsinh" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsub" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "ordinal->bigfloat" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfroot" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat->rational" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat->flonum" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfcbrt" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "flonum->bigfloat" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfsinh+cosh" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfremainder" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfodd?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfgt?" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bfexpt" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bffrac" 0) #s(boundary "mpfr.rkt" "bigfloat-mpfr.rkt" "bigfloat->integer" 0)) (#s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "10.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "+nan.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-0.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "6.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "5.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-4.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "1.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-8.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-10.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-inf.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "7.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "4.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "0.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-9.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "8.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-2.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "3.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-3.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-6.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "+inf.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "9.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-1.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "2.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-5.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-7.bf" 1) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "catalan.bf" 0) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "phi.bf" 0) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "log2.bf" 0) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-max.bf" 0) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "+max.bf" 0) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "pi.bf" 0) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "gamma.bf" 0) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "-min.bf" 0) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "epsilon.bf" 0) #s(boundary "mpfr.rkt" "bigfloat-constants.rkt" "+min.bf" 0)) (#s(boundary "quad-main.rkt" "main.rkt" "typeset" 1)) (#s(boundary "penalty-struct.rkt" "penalty-struct-adapted.rkt" "$penalty-width" 15826) #s(boundary "penalty-struct.rkt" "penalty-struct-adapted.rkt" "$penalty?" 14157) #s(boundary "penalty-struct.rkt" "penalty-struct-adapted.rkt" "$penalty-hyphens" 1266)) (#s(boundary "render.rkt" "main.rkt" "pdf-renderer%" 0)) (#s(boundary "world.rkt" "utils.rkt" "world:mergeable-quad-types" 3) #s(boundary "world.rkt" "utils.rkt" "world:split-quad-key" 1) #s(boundary "world.rkt" "utils.rkt" "world:leading-key" 1) #s(boundary "world.rkt" "utils.rkt" "world:font-name-key" 1) #s(boundary "world.rkt" "utils.rkt" "world:font-size-key" 1) #s(boundary "world.rkt" "utils.rkt" "world:y-position-key" 1) #s(boundary "world.rkt" "utils.rkt" "world:x-position-key" 1) #s(boundary "world.rkt" "utils.rkt" "world:font-style-key" 1) #s(boundary "world.rkt" "utils.rkt" "world:height-key" 1) #s(boundary "world.rkt" "utils.rkt" "world:font-weight-key" 1) #s(boundary "world.rkt" "utils.rkt" "world:font-style-default" 0) #s(boundary "world.rkt" "utils.rkt" "world:font-size-default" 0) #s(boundary "world.rkt" "utils.rkt" "world:leading-key-default" 0) #s(boundary "world.rkt" "utils.rkt" "world:font-name-default" 0) #s(boundary "world.rkt" "utils.rkt" "world:font-weight-default" 0)) (#s(boundary "world.rkt" "wrap.rkt" "world:hanging-chars" 17) #s(boundary "world.rkt" "wrap.rkt" "world:hyphens-and-dashes" 4) #s(boundary "world.rkt" "wrap.rkt" "world:minimum-last-line-chars" 1) #s(boundary "world.rkt" "wrap.rkt" "world:line-looseness-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:spaces" 1) #s(boundary "world.rkt" "wrap.rkt" "world:y-position-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:font-size-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:empty-string" 1) #s(boundary "world.rkt" "wrap.rkt" "world:x-position-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:allowed-overfull-ratio" 1) #s(boundary "world.rkt" "wrap.rkt" "world:font-weight-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:unbreakable-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:hyphen-penalty" 1) #s(boundary "world.rkt" "wrap.rkt" "world:hyphen-limit" 1) #s(boundary "world.rkt" "wrap.rkt" "world:font-style-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:word-break-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:total-lines-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:measure-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:ascent-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:before-break-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:new-line-penalty" 1) #s(boundary "world.rkt" "wrap.rkt" "world:no-break-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:soft-hyphen" 1) #s(boundary "world.rkt" "wrap.rkt" "world:width-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:horiz-alignment-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:line-index-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:horiz-alignment-last-line-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:font-name-key" 1) #s(boundary "world.rkt" "wrap.rkt" "world:font-size-default" 0) #s(boundary "world.rkt" "wrap.rkt" "world:last-line-can-be-short" 0) #s(boundary "world.rkt" "wrap.rkt" "world:use-optical-kerns?" 0) #s(boundary "world.rkt" "wrap.rkt" "world:measure-default" 0) #s(boundary "world.rkt" "wrap.rkt" "world:font-name-default" 0) #s(boundary "world.rkt" "wrap.rkt" "world:default-word-break-list" 0) #s(boundary "world.rkt" "wrap.rkt" "world:font-style-default" 0) #s(boundary "world.rkt" "wrap.rkt" "world:optical-overhang" 0) #s(boundary "world.rkt" "wrap.rkt" "world:horiz-alignment-default" 0) #s(boundary "world.rkt" "wrap.rkt" "world:font-weight-default" 0)) (#s(boundary "world.rkt" "quad-main.rkt" "world:min-first-lines" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:line-looseness-key" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:column-gutter-key" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:measure-key" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:column-index-key" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:min-last-lines" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:column-count-key" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:quality-key" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:total-lines-key" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:default-lines-per-column" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:minimum-lines-per-column" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:line-looseness-tolerance" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:draft-quality" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:max-quality" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:line-index-key" 1) #s(boundary "world.rkt" "quad-main.rkt" "world:column-gutter-key-default" 0) #s(boundary "world.rkt" "quad-main.rkt" "world:column-count-key-default" 0) #s(boundary "world.rkt" "quad-main.rkt" "world:quality-key-default" 0) #s(boundary "world.rkt" "quad-main.rkt" "world:allow-hyphenated-last-word-in-paragraph" 0) #s(boundary "world.rkt" "quad-main.rkt" "world:use-hyphenation?" 0) #s(boundary "world.rkt" "quad-main.rkt" "world:paper-width-default" 0)) (#s(boundary "world.rkt" "render.rkt" "world:font-name-key" 1) #s(boundary "world.rkt" "render.rkt" "world:page-key" 1) #s(boundary "world.rkt" "render.rkt" "world:font-size-key" 1) #s(boundary "world.rkt" "render.rkt" "world:ascent-key" 1) #s(boundary "world.rkt" "render.rkt" "world:y-position-key" 1) #s(boundary "world.rkt" "render.rkt" "world:x-position-key" 1) #s(boundary "world.rkt" "render.rkt" "world:font-weight-key" 1) #s(boundary "world.rkt" "render.rkt" "world:font-style-key" 1) #s(boundary "world.rkt" "render.rkt" "world:font-background-key" 1) #s(boundary "world.rkt" "render.rkt" "world:draft-quality" 1) #s(boundary "world.rkt" "render.rkt" "world:font-color-key" 1) #s(boundary "world.rkt" "render.rkt" "world:font-style-default" 0) #s(boundary "world.rkt" "render.rkt" "world:paper-height-default" 0) #s(boundary "world.rkt" "render.rkt" "world:font-background-default" 0) #s(boundary "world.rkt" "render.rkt" "world:font-size-default" 0) #s(boundary "world.rkt" "render.rkt" "world:quality-default" 0) #s(boundary "world.rkt" "render.rkt" "world:font-color-default" 0) #s(boundary "world.rkt" "render.rkt" "world:paper-width-default" 0) #s(boundary "world.rkt" "render.rkt" "world:font-name-default" 0) #s(boundary "world.rkt" "render.rkt" "world:font-weight-default" 0)) (#s(boundary "world.rkt" "main.rkt" "world:draft-quality" 1) #s(boundary "world.rkt" "main.rkt" "world:allow-hyphenated-last-word-in-paragraph" 0) #s(boundary "world.rkt" "main.rkt" "world:quality-default" 0)) (#s(boundary "patterns-hashed.rkt" "hyphenate.rkt" "hashed-patterns" 30736)) (#s(boundary "exceptions.rkt" "hyphenate.rkt" "default-exceptions" 14)) (#s(boundary "$ocm>" "ocm-struct-adapted.rkt" "(#<syntax:/home/ben/code/racket/benchmark/gradual-typing-performance/quad/benchmark/variation1111111111111111/ocm-struct-adapted.rkt:33:12" 14231)) (#s(boundary "quads.rkt" "utils.rkt" "quad-name" 13983) #s(boundary "quads.rkt" "utils.rkt" "word" 792) #s(boundary "quads.rkt" "utils.rkt" "box" 538) #s(boundary "quads.rkt" "utils.rkt" "quad-attrs" 0) #s(boundary "quads.rkt" "utils.rkt" "quad-list" 0) #s(boundary "quads.rkt" "utils.rkt" "make-quadattrs" 0) #s(boundary "quads.rkt" "utils.rkt" "quad-attr-ref" 0) #s(boundary "quads.rkt" "utils.rkt" "group-quad-list" 0) #s(boundary "quads.rkt" "utils.rkt" "whitespace/nbsp?" 0)) (#s(boundary "quads.rkt" "wrap.rkt" "word-string" 7290) #s(boundary "quads.rkt" "wrap.rkt" "quad->string" 5370) #s(boundary "quads.rkt" "wrap.rkt" "piece" 1856) #s(boundary "quads.rkt" "wrap.rkt" "word-break" 614) #s(boundary "quads.rkt" "wrap.rkt" "quad-name" 274) #s(boundary "quads.rkt" "wrap.rkt" "line" 219) #s(boundary "quads.rkt" "wrap.rkt" "optical-kern" 109) #s(boundary "quads.rkt" "wrap.rkt" "quads->line" 109) #s(boundary "quads.rkt" "wrap.rkt" "spacer" 55) #s(boundary "quads.rkt" "wrap.rkt" "whitespace?" 0) #s(boundary "quads.rkt" "wrap.rkt" "quad-list" 0) #s(boundary "quads.rkt" "wrap.rkt" "group-quad-list" 0) #s(boundary "quads.rkt" "wrap.rkt" "whitespace/nbsp?" 0) #s(boundary "quads.rkt" "wrap.rkt" "quad-attrs" 0) #s(boundary "quads.rkt" "wrap.rkt" "quad-has-attr?" 0) #s(boundary "quads.rkt" "wrap.rkt" "quad-attr-ref" 0)) (#s(boundary "quads.rkt" "quad-main.rkt" "line" 55) #s(boundary "quads.rkt" "quad-main.rkt" "column" 6) #s(boundary "quads.rkt" "quad-main.rkt" "page" 4) #s(boundary "quads.rkt" "quad-main.rkt" "quads->block" 4) #s(boundary "quads.rkt" "quad-main.rkt" "quad-name" 3) #s(boundary "quads.rkt" "quad-main.rkt" "quads->column" 3) #s(boundary "quads.rkt" "quad-main.rkt" "quads->page" 2) #s(boundary "quads.rkt" "quad-main.rkt" "quads->doc" 1) #s(boundary "quads.rkt" "quad-main.rkt" "quad-has-attr?" 0) #s(boundary "quads.rkt" "quad-main.rkt" "quad-list" 0) #s(boundary "quads.rkt" "quad-main.rkt" "group-quad-list" 0) #s(boundary "quads.rkt" "quad-main.rkt" "quad-attrs" 0) #s(boundary "quads.rkt" "quad-main.rkt" "quad-car" 0) #s(boundary "quads.rkt" "quad-main.rkt" "quad-attr-ref" 0)) (#s(boundary "quads.rkt" "quick-sample.rkt" "block" 8) #s(boundary "quads.rkt" "quick-sample.rkt" "box" 4) #s(boundary "quads.rkt" "quick-sample.rkt" "word" 2) #s(boundary "quads.rkt" "quick-sample.rkt" "page-break" 1) #s(boundary "quads.rkt" "quick-sample.rkt" "block-break" 1) #s(boundary "quads.rkt" "quick-sample.rkt" "column-break" 1)) (#s(boundary "quads.rkt" "render.rkt" "quad-name" 1035) #s(boundary "quads.rkt" "render.rkt" "word" 0) #s(boundary "quads.rkt" "render.rkt" "quad-car" 0) #s(boundary "quads.rkt" "render.rkt" "quad-attr-ref" 0) #s(boundary "quads.rkt" "render.rkt" "whitespace/nbsp?" 0)) (#s(boundary "sugar-list.rkt" "wrap.rkt" "break-at" 0) #s(boundary "sugar-list.rkt" "wrap.rkt" "slicef-after" 0) #s(boundary "sugar-list.rkt" "wrap.rkt" "shifts" 0)) (#s(boundary "sugar-list.rkt" "quad-main.rkt" "slice-at" 0)) (#s(boundary "racket/serialize" "measure.rkt" "serialize" 0) #s(boundary "racket/serialize" "measure.rkt" "deserialize" 0)) (#s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "$ocm-entry->value" 8788) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "$ocm-finished" 8617) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "$ocm?" 7161) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "$ocm-tentative" 1631) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "set-$ocm-min-row-indices!" 850) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "set-$ocm-min-entrys!" 850) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "set-$ocm-finished!" 621) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "set-$ocm-tentative!" 300) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "$ocm-base" 228) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "set-$ocm-base!" 72) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "$ocm-min-row-indices" 0) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "$ocm-matrix-proc" 0) #s(boundary "ocm-struct.rkt" "ocm-struct-adapted.rkt" "$ocm-min-entrys" 0)) (#s(boundary "measure.rkt" "utils.rkt" "round-float" 55)) (#s(boundary "measure.rkt" "wrap.rkt" "round-float" 15330) #s(boundary "measure.rkt" "wrap.rkt" "measure-text" 4895) #s(boundary "measure.rkt" "wrap.rkt" "measure-ascent" 955)) (#s(boundary "measure.rkt" "quad-main.rkt" "round-float" 3) #s(boundary "measure.rkt" "quad-main.rkt" "update-text-cache-file" 1) #s(boundary "measure.rkt" "quad-main.rkt" "load-text-cache-file" 1)) (#s(boundary "ocm.rkt" "wrap.rkt" "make-ocm" 14231) #s(boundary "ocm.rkt" "wrap.rkt" "ocm-min-entry" 0) #s(boundary "ocm.rkt" "wrap.rkt" "ocm-min-index" 0)) (#s(boundary "../base/csp/main.rkt" "quad-main.rkt" "problem%" 0)) (#s(boundary "quick-sample.rkt" "main.rkt" "quick-sample" 0)) (#s(boundary "wrap.rkt" "quad-main.rkt" "wrap-best" 109) #s(boundary "wrap.rkt" "quad-main.rkt" "insert-spacers-in-line" 55) #s(boundary "wrap.rkt" "quad-main.rkt" "fill" 55) #s(boundary "wrap.rkt" "quad-main.rkt" "add-horiz-positions" 55) #s(boundary "wrap.rkt" "quad-main.rkt" "wrap-first" 0) #s(boundary "wrap.rkt" "quad-main.rkt" "wrap-adaptive" 0)) (#s(boundary "$penalty>" "penalty-struct-adapted.rkt" "(#<syntax:/home/ben/code/racket/benchmark/gradual-typing-performance/quad/benchmark/variation1111111111111111/penalty-struct-adapted.rkt:12:12" 7119)) (#s(boundary "hyphenate.rkt" "utils.rkt" "hyphenate" 514)))